#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
INFERVPN –ë–û–¢ v11_final
-----------------------
–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤, —É—Å—Ç—Ä–æ–π—Å—Ç–≤, –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤, –ø–ª–∞—Ç–µ–∂–µ–π —á–µ—Ä–µ–∑ polling.
- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: "–ü—Ä–æ—Ñ–∏–ª—å", "–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "–ü–æ–ø–æ–ª–Ω–∏—Ç—å", "–î–æ–ø. —Ç—Ä–∞—Ñ–∏–∫", "–ü–æ–¥–¥–µ—Ä–∂–∫–∞".
- –ü—Ä–æ—Ñ–∏–ª—å —Å –∫–Ω–æ–ø–∫–∞–º–∏: "–ú–æ–∏ –∫–ª—é—á–∏", "–ë–∞–ª–∞–Ω—Å", "‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å Outline", "üìÑ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥".
- –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—é—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ (2 –¥–Ω—è, –±–æ–Ω—É—Å 1 –ì–ë) –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞—é—Ç –∫–ª—é—á.
- –ü—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ (–∫–æ–ª-–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤) –∏ —Å–µ—Ä–≤–µ—Ä.
- VPN-—Å–µ—Ä–≤–µ—Ä–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —É–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É "servers". –ê–¥–º–∏–Ω –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ —Å–µ—Ä–≤–µ—Ä—ã.
- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫ –º–æ–∂–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π.
- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª, –ø—Ä–µ–¥–ª–∞–≥–∞—é—Ç—Å—è –∫–Ω–æ–ø–∫–∏ "–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è" –∏ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å".
- –ü–ª–∞—Ç–µ–∂–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ CryptoPay; –∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è, –µ—Å–ª–∏ –Ω–µ –æ–ø–ª–∞—á–µ–Ω –∑–∞ 10 –º–∏–Ω—É—Ç.
- –ö–æ–º–∞–Ω–¥–∞ /broadcast (—á–µ—Ä–µ–∑ reply) –ø–æ–∑–≤–æ–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Ä–∞–∑–æ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
- –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–∞–∫–∂–µ –∫–æ–º–∞–Ω–¥—ã /addserver –∏ /serverlist –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è VPN-—Å–µ—Ä–≤–µ—Ä–∞–º–∏.
- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.
"""

import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import sqlite3
import requests
from datetime import datetime, timedelta
import threading
import time
import urllib3
import os

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
API_TOKEN = "7809159665:AAEM1x02VKgTAs8OzTt0I-ZUC57XbKXMORU"
CRYPTO_BOT_TOKEN = "368678:AAda5iskM0F7iKcgL38whM8fpUJw5XoTgjW"
OUTLINE_API_URL = "https://194.156.66.56:43396/elRRhieGh9AghrUPycn9iA"
CRYPTO_BOT_API = "https://pay.crypt.bot/api"
ADMIN_ID = 1637201884

# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –±–∞–∑–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ (–º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤)
SUBSCRIPTION_OPTIONS = {
    "1 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ": 1,
    "2 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞": 1.5,
    "3 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞": 2
}

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞
ADDITIONAL_TRAFFIC_PACKAGES = {
    "500 –ú–ë": 50,
    "1 –ì–ë": 90,
    "2 –ì–ë": 170
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –∏ —Å–∫–∏–¥–∫–∏
TRIAL_PERIOD_DAYS = 2
TRIAL_TRAFFIC_GB = 1
SUBSCRIPTION_DISCOUNT_PERCENT = 20

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–ª–∞—Ç–µ–∂–µ–π
PAYMENT_POLL_INTERVAL = 30      # —Å–µ–∫—É–Ω–¥
ORDER_TIMEOUT_SECONDS = 600     # 10 –º–∏–Ω—É—Ç

# –ü—Ä–æ—á–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
manual_usdt_rate = None
extra_gb_price = 100
TRAFFIC_LIMIT_GB = 1
REQUIRE_SUBSCRIPTION = True

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ---
bot = telebot.TeleBot(API_TOKEN, threaded=True)

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
waiting_for_topup = set()          # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –æ–∂–∏–¥–∞—é—â–∏–µ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
temp_device_choice = {}            # –í—ã–±–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "1 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
temp_region_choice = {}            # –í—ã–±–æ—Ä —Å–µ—Ä–≤–µ—Ä–∞ (–±—É–¥–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã servers)

# –§–ª–∞–≥–∏ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
pending_admin_add_balance = False
pending_admin_create_promo = False
pending_admin_set_price = False

# --- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü ---
try:
    db = sqlite3.connect("infervpn.db", check_same_thread=False)
except sqlite3.DatabaseError:
    print("‚ùå –û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞. –£–¥–∞–ª–∏—Ç–µ —Ñ–∞–π–ª infervpn.db.")
    exit()

with db:
    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    db.execute('''CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY,
        key_id TEXT,
        access_url TEXT,
        expires DATETIME,
        is_trial BOOLEAN DEFAULT 1,
        balance REAL DEFAULT 0,
        is_subscribed BOOLEAN DEFAULT 0,
        traffic_used REAL DEFAULT 0,
        allocated_traffic REAL DEFAULT 0,
        region TEXT,
        device_count INTEGER DEFAULT 1,
        subscription_skipped BOOLEAN DEFAULT 0
    )''')
    try:
        db.execute("ALTER TABLE users ADD COLUMN allocated_traffic REAL DEFAULT 0")
    except sqlite3.OperationalError:
        pass
    try:
        db.execute("ALTER TABLE users ADD COLUMN subscription_skipped BOOLEAN DEFAULT 0")
    except sqlite3.OperationalError:
        pass

    # –¢–∞–±–ª–∏—Ü–∞ –ø–ª–∞—Ç–µ–∂–µ–π ‚Äì created_at —Ö—Ä–∞–Ω–∏—Ç—Å—è –∫–∞–∫ INTEGER (Unix timestamp)
    db.execute('''CREATE TABLE IF NOT EXISTS payments (
        payment_id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        invoice_id TEXT,
        amount REAL,
        status TEXT DEFAULT 'pending',
        created_at INTEGER DEFAULT (strftime('%s','now'))
    )''')

    # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
    db.execute('''CREATE TABLE IF NOT EXISTS promocodes (
        code TEXT PRIMARY KEY,
        traffic_bonus REAL DEFAULT 0.1,
        subscription_days INTEGER DEFAULT 0,
        max_activations INTEGER DEFAULT 1
    )''')
    db.execute('''CREATE TABLE IF NOT EXISTS promo_used (
        user_id INTEGER,
        code TEXT,
        PRIMARY KEY (user_id, code)
    )''')

    # –ù–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ VPN-—Å–µ—Ä–≤–µ—Ä–æ–≤ (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ)
    db.execute('''CREATE TABLE IF NOT EXISTS servers (
        server_id INTEGER PRIMARY KEY AUTOINCREMENT,
        region TEXT,
        api_url TEXT,
        base_price REAL
    )''')

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

def get_usdt_rate():
    if manual_usdt_rate:
        return manual_usdt_rate
    try:
        r = requests.get("https://api.binance.com/api/v3/ticker/price?symbol=USDTRUB", timeout=5)
        return float(r.json()['price'])
    except Exception:
        return 90

def is_user_subscribed(user_id):
    with db:
        cur = db.cursor()
        cur.execute("SELECT subscription_skipped FROM users WHERE id=?", (user_id,))
        row = cur.fetchone()
        if row and row[0] == 1:
            return True
    if not REQUIRE_SUBSCRIPTION:
        return True
    try:
        member = bot.get_chat_member("@INFERvpn", user_id)
        return member.status in ("member", "creator", "administrator")
    except Exception:
        return False

def subscribe_prompt(user_id):
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data='i_subscribed'))
    markup.add(InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data='skip_subscribe'))
    bot.send_message(user_id, "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª @INFERvpn.\n–ù–∞–∂–º–∏—Ç–µ ¬´–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è¬ª, –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –∏–ª–∏ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª –¥–ª—è –≤—Ö–æ–¥–∞.", reply_markup=markup)

def create_access_key(api_url):
    try:
        response = requests.post(f"{api_url}/access-keys", verify=False, timeout=5)
        data = response.json()
        return data.get('id'), data.get('accessUrl')
    except Exception:
        return None, None

def create_invoice(user_id, amount_rub):
    rate = get_usdt_rate()
    usdt_amount = round(amount_rub / rate, 2)
    payload = {
        "asset": "USDT",
        "amount": str(usdt_amount),
        "description": f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ INFERVPN –Ω–∞ {amount_rub}‚ÇΩ",
        "hidden_message": "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É!",
        "paid_btn_name": "openBot",
        "paid_btn_url": "https://t.me/infervpn_bot"
    }
    headers = {"Crypto-Pay-API-Token": CRYPTO_BOT_TOKEN}
    try:
        r = requests.post(f"{CRYPTO_BOT_API}/createInvoice", json=payload, headers=headers, timeout=10)
        r.raise_for_status()
        result = r.json()
        if result.get("ok"):
            data = result["result"]
            invoice_id = data.get("invoice_id")
            pay_url = data.get("pay_url")
            return invoice_id, pay_url
        else:
            return None, None
    except Exception:
        return None, None

def get_invoice_status(invoice_id):
    headers = {"Crypto-Pay-API-Token": CRYPTO_BOT_TOKEN}
    try:
        r = requests.post(f"{CRYPTO_BOT_API}/getInvoice", json={"invoice_id": invoice_id}, headers=headers, timeout=10)
        r.raise_for_status()
        result = r.json()
        return result["result"].get("status")
    except Exception:
        return None

def load_servers():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏–∑ –ë–î."""
    with db:
        cur = db.cursor()
        cur.execute("SELECT server_id, region, api_url, base_price FROM servers")
        return cur.fetchall()

def region_selection_markup():
    """–°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã servers."""
    servers = load_servers()
    markup = InlineKeyboardMarkup()
    for server in servers:
        server_id, region, api_url, base_price = server
        button_text = f"{region} ({base_price}‚ÇΩ)"
        markup.add(InlineKeyboardButton(button_text, callback_data=f"region_{server_id}"))
    return markup

def additional_traffic_markup():
    markup = InlineKeyboardMarkup()
    for package, price in ADDITIONAL_TRAFFIC_PACKAGES.items():
        markup.add(InlineKeyboardButton(f"{package} - {price}‚ÇΩ", callback_data=f"buy_traffic_{package}"))
    return markup

def main_menu():
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data='profile'))
    markup.add(InlineKeyboardButton("üõí –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data='buy'))
    markup.add(InlineKeyboardButton("üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data='topup'))
    markup.add(InlineKeyboardButton("üì∂ –î–æ–ø. —Ç—Ä–∞—Ñ–∏–∫", callback_data='buy_traffic'))
    markup.add(InlineKeyboardButton("üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data='support'))
    return markup

def profile_menu():
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üîë –ú–æ–∏ –∫–ª—é—á–∏", callback_data='my_keys'))
    markup.add(InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data='my_balance'))
    markup.add(InlineKeyboardButton("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å Outline", callback_data='outline_download'))
    markup.add(InlineKeyboardButton("üìÑ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", callback_data='instructions'))
    markup.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back'))
    return markup

# --- –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–µ—Ä–≤–µ—Ä–æ–≤ ---

@bot.message_handler(commands=['addserver'])
def handle_addserver(message):
    user_id = message.from_user.id
    if user_id != ADMIN_ID:
        return
    # –§–æ—Ä–º–∞—Ç: /addserver <—Ä–µ–≥–∏–æ–Ω> <api_url> <base_price>
    try:
        parts = message.text.split(maxsplit=3)
        if len(parts) < 4:
            bot.send_message(user_id, "–§–æ—Ä–º–∞—Ç: /addserver <—Ä–µ–≥–∏–æ–Ω> <api_url> <base_price>")
            return
        region = parts[1]
        api_url = parts[2]
        base_price = float(parts[3])
        with db:
            db.execute("INSERT INTO servers (region, api_url, base_price) VALUES (?, ?, ?)", (region, api_url, base_price))
        bot.send_message(user_id, f"‚úÖ –°–µ—Ä–≤–µ—Ä '{region}' –¥–æ–±–∞–≤–ª–µ–Ω!")
    except Exception as e:
        bot.send_message(user_id, f"–û—à–∏–±–∫–∞: {e}")

@bot.message_handler(commands=['serverlist'])
def handle_serverlist(message):
    user_id = message.from_user.id
    if user_id != ADMIN_ID:
        return
    servers = load_servers()
    if not servers:
        bot.send_message(user_id, "–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤.")
        return
    msg = "–°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤:\n"
    for server in servers:
        server_id, region, api_url, base_price = server
        msg += f"ID: {server_id} | {region} | {api_url} | {base_price}‚ÇΩ\n"
    bot.send_message(user_id, msg)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---

@bot.message_handler(commands=['start'])
def handle_start(message):
    user_id = message.from_user.id
    if not is_user_subscribed(user_id):
        subscribe_prompt(user_id)
        return
    with db:
        cur = db.cursor()
        cur.execute("SELECT is_subscribed, expires FROM users WHERE id=?", (user_id,))
        row = cur.fetchone()
        if row is None or (row is not None and not row[0]):
            db.execute("INSERT OR IGNORE INTO users (id) VALUES (?)", (user_id,))
            trial_expires = datetime.now() + timedelta(days=TRIAL_PERIOD_DAYS)
            key_id, access_url = create_access_key(OUTLINE_API_URL)
            db.execute("UPDATE users SET expires=?, is_trial=1, key_id=?, access_url=? WHERE id=?",
                       (trial_expires.strftime("%Y-%m-%d %H:%M:%S"), key_id, access_url, user_id))
            welcome_message = (f"üëã –ü—Ä–∏–≤–µ—Ç –æ—Ç –∫–æ–º–∞–Ω–¥—ã INFERVPN!\n–¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥: {TRIAL_PERIOD_DAYS} –¥–Ω—è(–µ–π), –±–æ–Ω—É—Å {TRIAL_TRAFFIC_GB} –ì–ë.\n–ú—ã –∑–∞ —Å–≤–æ–±–æ–¥–Ω—ã–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç!")
        else:
            welcome_message = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ!"
    bot.send_message(user_id, welcome_message, reply_markup=main_menu())

@bot.message_handler(commands=['admin'])
def handle_admin(message):
    user_id = message.from_user.id
    if user_id != ADMIN_ID:
        return
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üì¨ –†–∞—Å—Å—ã–ª–∫–∞ (reply)", callback_data='admin_broadcast'))
    markup.add(InlineKeyboardButton("üí∞ –ù–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data='admin_add_balance'))
    markup.add(InlineKeyboardButton("üéÅ –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data='admin_create_promo'))
    markup.add(InlineKeyboardButton("üí∏ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É", callback_data='admin_set_price'))
    markup.add(InlineKeyboardButton("‚öôÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞", callback_data='admin_toggle_subscription'))
    markup.add(InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='admin_stats'))
    markup.add(InlineKeyboardButton("üí¨ –¢–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data='admin_support'))
    bot.send_message(user_id, "üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=markup)

@bot.message_handler(commands=['broadcast'])
def handle_broadcast(message):
    user_id = message.from_user.id
    if user_id != ADMIN_ID:
        return
    if not message.reply_to_message:
        bot.send_message(user_id, "–û—à–∏–±–∫–∞: –æ—Ç–≤–µ—Ç—å—Ç–µ (reply) –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return
    broadcast_msg = message.reply_to_message
    with db:
        cur = db.cursor()
        cur.execute("SELECT id FROM users")
        all_ids = [row[0] for row in cur.fetchall()]
    total = 0
    for uid in all_ids:
        if uid == ADMIN_ID:
            continue
        try:
            if broadcast_msg.content_type == 'photo':
                bot.send_photo(uid, broadcast_msg.photo[-1].file_id, caption=broadcast_msg.caption)
            elif broadcast_msg.text:
                bot.send_message(uid, broadcast_msg.text)
            total += 1
        except Exception:
            pass
    bot.send_message(user_id, f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {total} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")

# --- Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---

@bot.callback_query_handler(func=lambda call: call.data == 'i_subscribed')
def handle_i_subscribed(call):
    user_id = call.from_user.id
    if is_user_subscribed(user_id):
        bot.send_message(user_id, "–û—Ç–ª–∏—á–Ω–æ, –ø–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!", reply_markup=main_menu())
    else:
        subscribe_prompt(user_id)
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data == 'skip_subscribe')
def handle_skip_subscribe(call):
    user_id = call.from_user.id
    with db:
        db.execute("UPDATE users SET subscription_skipped=1 WHERE id=?", (user_id,))
    bot.send_message(user_id, "–í—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=main_menu())
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data == 'profile')
def handle_profile(call):
    user_id = call.from_user.id
    bot.send_message(user_id, "üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:", reply_markup=profile_menu())
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data == 'my_balance')
def handle_my_balance(call):
    user_id = call.from_user.id
    with db:
        cur = db.cursor()
        cur.execute("SELECT balance FROM users WHERE id=?", (user_id,))
        row = cur.fetchone()
    if row:
        bot.send_message(user_id, f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {row[0]:.2f} ‚ÇΩ")
    else:
        bot.send_message(user_id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data == 'topup')
def handle_topup_callback(call):
    user_id = call.from_user.id
    waiting_for_topup.add(user_id)
    bot.send_message(user_id, "üí≥ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ä—É–±–ª—è—Ö:")
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data == 'buy_traffic')
def handle_buy_traffic_callback(call):
    user_id = call.from_user.id
    bot.send_message(user_id, "üì∂ –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞:", reply_markup=additional_traffic_markup())
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith("buy_traffic_"))
def handle_buy_traffic_package(call):
    user_id = call.from_user.id
    package = call.data.split("buy_traffic_")[1]
    price = ADDITIONAL_TRAFFIC_PACKAGES.get(package)
    if price is None:
        bot.send_message(user_id, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –ø–∞–∫–µ—Ç–∞.")
        bot.answer_callback_query(call.id)
        return
    with db:
        cur = db.cursor()
        cur.execute("SELECT balance FROM users WHERE id=?", (user_id,))
        row = cur.fetchone()
        if not row or row[0] < price:
            bot.send_message(user_id, f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–∞–∫–µ—Ç–∞ {package} (—Ü–µ–Ω–∞: {price}‚ÇΩ).")
            bot.answer_callback_query(call.id)
            return
        db.execute("UPDATE users SET balance = balance - ? WHERE id=?", (price, user_id))
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫
        added_traffic = 0
        if "–ú–ë" in package:
            try:
                mb_value = float(package.split()[0])
                added_traffic = mb_value / 1024
            except Exception:
                added_traffic = 0
        elif "–ì–ë" in package:
            try:
                gb_value = float(package.split()[0])
                added_traffic = gb_value
            except Exception:
                added_traffic = 0
        db.execute("UPDATE users SET allocated_traffic = allocated_traffic + ? WHERE id=?", (added_traffic, user_id))
    bot.send_message(user_id, f"‚úÖ –ü–∞–∫–µ—Ç {package} –∑–∞ {price}‚ÇΩ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω.\n–î–æ–ø. —Ç—Ä–∞—Ñ–∏–∫ —É–≤–µ–ª–∏—á–µ–Ω –Ω–∞ {added_traffic:.2f} –ì–ë.")
    bot.answer_callback_query(call.id)

def subscription_options_markup():
    markup = InlineKeyboardMarkup()
    for label, price in SUBSCRIPTION_OPTIONS.items():
        markup.add(InlineKeyboardButton(f"{label} ({price}‚ÇΩ)", callback_data=f"device_{label}"))
    return markup

@bot.callback_query_handler(func=lambda call: call.data == 'buy')
def handle_buy_callback(call):
    user_id = call.from_user.id
    bot.send_message(user_id, "üõí –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤:", reply_markup=subscription_options_markup())
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith("device_"))
def handle_device(call):
    user_id = call.from_user.id
    device_label = call.data.split("device_", 1)[1]
    temp_device_choice[user_id] = device_label
    bot.send_message(user_id, "üåç –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä (—Ä–µ–≥–∏–æ–Ω):", reply_markup=region_selection_markup())
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith("region_"))
def handle_region(call):
    user_id = call.from_user.id
    try:
        server_id = int(call.data.split("region_")[1])
    except Exception:
        bot.send_message(user_id, "–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞.")
        return
    with db:
        cur = db.cursor()
        cur.execute("SELECT region, api_url, base_price FROM servers WHERE server_id=?", (server_id,))
        server = cur.fetchone()
    if not server:
        bot.send_message(user_id, "–°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    region_name, api_url, base_price = server
    device_label = temp_device_choice.get(user_id)
    if device_label not in SUBSCRIPTION_OPTIONS:
        bot.send_message(user_id, "–û—à–∏–±–∫–∞: —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    multiplier = SUBSCRIPTION_OPTIONS[device_label]
    final_price = base_price * multiplier
    with db:
        cur = db.cursor()
        cur.execute("SELECT balance, expires, is_trial FROM users WHERE id=?", (user_id,))
        row = cur.fetchone()
        if not row:
            bot.send_message(user_id, "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        balance, expires_str, is_trial = row
        now = datetime.now()
        trial_active = False
        trial_expired = False
        if expires_str:
            current_expires = datetime.strptime(expires_str, "%Y-%m-%d %H:%M:%S")
            if is_trial and current_expires > now:
                trial_active = True
            elif is_trial and current_expires <= now:
                trial_expired = True
        if trial_active:
            bot.send_message(user_id, f"–¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ –¥–æ {current_expires.strftime('%d.%m.%Y %H:%M')}. –ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π {SUBSCRIPTION_DISCOUNT_PERCENT}% –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ—Å–ª–µ –µ–≥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è.")
            return
        if trial_expired and is_trial:
            final_price = final_price * (100 - SUBSCRIPTION_DISCOUNT_PERCENT) / 100
            cur.execute("UPDATE users SET is_trial=0 WHERE id=?", (user_id,))
        if balance < final_price:
            bot.send_message(user_id, f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ ({balance}‚ÇΩ); —Ç—Ä–µ–±—É–µ—Ç—Å—è {final_price}‚ÇΩ.")
            return
        key_id, access_url = create_access_key(api_url)
        if not access_url:
            bot.send_message(user_id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª—é—á. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        new_expires = datetime.now() + timedelta(days=30)
        cur.execute("""
            UPDATE users
               SET key_id=?,
                   access_url=?,
                   expires=?,
                   is_subscribed=1,
                   is_trial=0,
                   traffic_used=0,
                   balance=balance-?,
                   region=?,
                   device_count=?
             WHERE id=?
        """, (key_id, access_url, new_expires.strftime("%Y-%m-%d %H:%M:%S"), final_price, region_name, int(device_label.split()[0]), user_id))
        bot.send_message(user_id, f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!\nüîë –ö–ª—é—á: {access_url}\nüìÖ –î–æ: {new_expires.strftime('%d.%m.%Y %H:%M')}\nüìç –°–µ—Ä–≤–µ—Ä: {region_name}\nüì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤: {device_label}\n–¶–µ–Ω–∞: {final_price}‚ÇΩ")
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data == 'support')
def handle_support(call):
    user_id = call.from_user.id
    bot.send_message(user_id, "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @alfageran01")
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data == 'my_keys')
def handle_my_keys(call):
    user_id = call.from_user.id
    with db:
        cur = db.cursor()
        cur.execute("SELECT access_url FROM users WHERE id=?", (user_id,))
        row = cur.fetchone()
    if row and row[0]:
        bot.send_message(user_id, f"üîë –í–∞—à –∫–ª—é—á: {row[0]}")
    else:
        bot.send_message(user_id, "‚ùå –ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data == 'outline_download')
def handle_outline_download(call):
    user_id = call.from_user.id
    bot.send_message(user_id, "‚¨áÔ∏è –°–∫–∞—á–∞–π—Ç–µ Outline –ø–æ —Å—Å—ã–ª–∫–µ: https://getoutline.org")
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data == 'instructions')
def handle_instructions(call):
    user_id = call.from_user.id
    bot.send_message(user_id, "üìÑ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:\n1. –°–∫–∞—á–∞–π—Ç–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Outline.\n2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—ã–¥–∞–Ω–Ω—ã–π –∫–ª—é—á.\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ –Ω–∞ —Å–∞–π—Ç–µ.")
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data == 'back')
def handle_back(call):
    user_id = call.from_user.id
    bot.send_message(user_id, "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
    bot.answer_callback_query(call.id)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ ---

@bot.message_handler(func=lambda m: m.text and m.text.strip().isdigit() and m.from_user.id in waiting_for_topup)
def handle_topup_amount(message):
    user_id = message.from_user.id
    waiting_for_topup.remove(user_id)
    amount = int(message.text.strip())
    if amount < 10:
        bot.send_message(user_id, "‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è ‚Äî 10‚ÇΩ.")
        return
    invoice_id, pay_url = create_invoice(user_id, amount)
    if invoice_id and pay_url:
        with db:
            db.execute("INSERT INTO payments (user_id, invoice_id, amount, status, created_at) VALUES (?, ?, ?, 'pending', ?)",
                       (user_id, invoice_id, amount, int(time.time())))
        bot.send_message(user_id, f"üí≥ –°—á—ë—Ç –Ω–∞ {amount}‚ÇΩ —Å–æ–∑–¥–∞–Ω.\n–û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n{pay_url}")
    else:
        bot.send_message(user_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á—ë—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.message_handler(func=lambda m: m.text and (not m.text.strip().isdigit()) and m.from_user.id not in [ADMIN_ID] and m.from_user.id not in waiting_for_topup)
def handle_promocode(message):
    from datetime import datetime, timedelta
    user_id = message.from_user.id
    code = message.text.strip().upper()
    with db:
        cur = db.cursor()
        cur.execute("SELECT traffic_bonus, subscription_days, max_activations FROM promocodes WHERE code=?", (code,))
        promo = cur.fetchone()
        if not promo:
            bot.send_message(user_id, "‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        traffic_bonus, subs_days, max_act = promo
        cur.execute("SELECT COUNT(*) FROM promo_used WHERE code=?", (code,))
        usage_count = cur.fetchone()[0]
        if usage_count >= max_act:
            bot.send_message(user_id, "‚ö†Ô∏è –≠—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.")
            return
        cur.execute("UPDATE users SET traffic_used = traffic_used - ? WHERE id=?", (traffic_bonus, user_id))
        cur.execute("SELECT expires FROM users WHERE id=?", (user_id,))
        row = cur.fetchone()
        now = datetime.now()
        if row and row[0]:
            try:
                current_expires = datetime.strptime(row[0], "%Y-%m-%d %H:%M:%S")
            except Exception:
                current_expires = now
            new_expires = now + timedelta(days=subs_days) if current_expires < now else current_expires + timedelta(days=subs_days)
        else:
            new_expires = now + timedelta(days=subs_days)
        cur.execute("UPDATE users SET expires=? WHERE id=?", (new_expires.strftime("%Y-%m-%d %H:%M:%S"), user_id))
        cur.execute("INSERT INTO promo_used (user_id, code) VALUES (?, ?)", (user_id, code))
        bot.send_message(user_id, f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–º–µ–Ω—ë–Ω!\n–î–æ–±–∞–≤–ª–µ–Ω–æ: {traffic_bonus} –ì–ë —Ç—Ä–∞—Ñ–∏–∫–∞, –ø–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ {subs_days} –¥–Ω.")

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ ---

@bot.callback_query_handler(func=lambda call: call.data == 'admin_broadcast')
def handle_admin_broadcast(call):
    admin_id = call.from_user.id
    bot.send_message(admin_id, "–ß—Ç–æ–±—ã —Ä–∞–∑–æ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–≤–µ—Ç—å—Ç–µ (reply) –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /broadcast.")
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data == 'admin_add_balance')
def handle_admin_add_balance(call):
    global pending_admin_add_balance
    admin_id = call.from_user.id
    pending_admin_add_balance = True
    bot.send_message(admin_id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—É–º–º—É –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª–æ–º.\n–ü—Ä–∏–º–µ—Ä: 123456789 100")
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data == 'admin_create_promo')
def handle_admin_create_promo(call):
    global pending_admin_create_promo
    admin_id = call.from_user.id
    pending_admin_create_promo = True
    bot.send_message(admin_id, "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ö–û–î —Ç—Ä–∞—Ñ–∏–∫_–±–æ–Ω—É—Å –ø–æ–¥–ø–∏—Å–∫–∞_–¥–Ω–µ–π max_activations\n–ü—Ä–∏–º–µ—Ä: PROMO10 1 7 10")
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data == 'admin_set_price')
def handle_admin_set_price(call):
    global pending_admin_set_price
    admin_id = call.from_user.id
    pending_admin_set_price = True
    bot.send_message(admin_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É USDT (—á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ).\n–ü—Ä–∏–º–µ—Ä: 85")
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data == 'admin_toggle_subscription')
def handle_admin_toggle_subscription(call):
    global REQUIRE_SUBSCRIPTION
    admin_id = call.from_user.id
    REQUIRE_SUBSCRIPTION = not REQUIRE_SUBSCRIPTION
    status = "–≤–∫–ª—é—á–µ–Ω–æ" if REQUIRE_SUBSCRIPTION else "–≤—ã–∫–ª—é—á–µ–Ω–æ"
    bot.send_message(admin_id, f"–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ —Ç–µ–ø–µ—Ä—å {status}.")
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data == 'admin_stats')
def handle_admin_stats(call):
    admin_id = call.from_user.id
    with db:
        cur = db.cursor()
        cur.execute("SELECT COUNT(*) FROM users")
        total_users = cur.fetchone()[0]
        cur.execute("SELECT SUM(balance) FROM users")
        total_balance = cur.fetchone()[0] or 0
        cur.execute("SELECT COUNT(*) FROM payments WHERE status='paid'")
        paid_payments = cur.fetchone()[0]
        cur.execute("SELECT COUNT(*) FROM servers")
        total_servers = cur.fetchone()[0]
    stats_msg = (f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                 f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
                 f"–û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {total_balance:.2f}‚ÇΩ\n"
                 f"–û–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π: {paid_payments}\n"
                 f"–°–µ—Ä–≤–µ—Ä–æ–≤: {total_servers}")
    bot.send_message(admin_id, stats_msg)
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data == 'admin_support')
def handle_admin_support(call):
    admin_id = call.from_user.id
    bot.send_message(admin_id, "üí¨ –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞: @alfageran01")
    bot.answer_callback_query(call.id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –∫–æ–º–∞–Ω–¥–∞–º
@bot.message_handler(func=lambda m: m.from_user.id == ADMIN_ID and m.text and not m.text.startswith('/'))
def handle_admin_pending_input(message):
    global pending_admin_add_balance, pending_admin_create_promo, pending_admin_set_price, manual_usdt_rate
    admin_id = message.from_user.id
    text = message.text.strip()
    # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    if pending_admin_add_balance:
        try:
            parts = text.split()
            if len(parts) != 2:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
            target_id = int(parts[0])
            amount = float(parts[1])
            with db:
                db.execute("UPDATE users SET balance = balance + ? WHERE id=?", (amount, target_id))
            bot.send_message(admin_id, f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id} —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount}‚ÇΩ.")
        except Exception as e:
            bot.send_message(admin_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")
        pending_admin_add_balance = False
        return
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
    if pending_admin_create_promo:
        try:
            parts = text.split()
            if len(parts) != 4:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
            code = parts[0].upper()
            traffic_bonus = float(parts[1])
            subs_days = int(parts[2])
            max_act = int(parts[3])
            with db:
                db.execute("INSERT INTO promocodes (code, traffic_bonus, subscription_days, max_activations) VALUES (?, ?, ?, ?)",
                           (code, traffic_bonus, subs_days, max_act))
            bot.send_message(admin_id, f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ {code} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
        except Exception as e:
            bot.send_message(admin_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {e}")
        pending_admin_create_promo = False
        return
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–Ω—ã USDT
    if pending_admin_set_price:
        try:
            new_price = float(text)
            manual_usdt_rate = new_price
            bot.send_message(admin_id, f"‚úÖ –ù–æ–≤–∞—è —Ü–µ–Ω–∞ USDT —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {new_price}")
        except Exception as e:
            bot.send_message(admin_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ü–µ–Ω—ã: {e}")
        pending_admin_set_price = False
        return
    # –ï—Å–ª–∏ –Ω–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏ –¥—Ä—É–≥–∏–µ –∞–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏–∏
    bot.send_message(admin_id, "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞.")

# --- –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π ---
def poll_pending_payments():
    while True:
        try:
            with db:
                cur = db.cursor()
                cur.execute("SELECT payment_id, user_id, invoice_id, amount, created_at FROM payments WHERE status='pending'")
                pending = cur.fetchall()
                now_ts = int(time.time())
                for payment in pending:
                    payment_id, uid, invoice_id, amount, created_at_ts = payment
                    if now_ts - int(created_at_ts) > ORDER_TIMEOUT_SECONDS:
                        db.execute("UPDATE payments SET status='canceled' WHERE payment_id=?", (payment_id,))
                        bot.send_message(uid, "‚ö†Ô∏è –í–∞—à –∑–∞–∫–∞–∑ –Ω–µ –æ–ø–ª–∞—á–µ–Ω –≤–æ–≤—Ä–µ–º—è –∏ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.")
                        continue
                    status = get_invoice_status(invoice_id)
                    if status == "paid":
                        db.execute("UPDATE users SET balance = balance + ? WHERE id=?", (amount, uid))
                        db.execute("UPDATE payments SET status='paid' WHERE payment_id=?", (payment_id,))
                        bot.send_message(uid, f"‚úÖ –û–ø–ª–∞—Ç–∞ {amount}‚ÇΩ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω!")
                    elif status == "expired":
                        db.execute("UPDATE payments SET status='canceled' WHERE payment_id=?", (payment_id,))
                        bot.send_message(uid, "‚ö†Ô∏è –í–∞—à —Å—á—ë—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω –∏ –æ—Ç–º–µ–Ω–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Å—á—ë—Ç.")
            time.sleep(PAYMENT_POLL_INTERVAL)
        except Exception:
            time.sleep(PAYMENT_POLL_INTERVAL)

threading.Thread(target=poll_pending_payments, daemon=True).start()

def run_bot():
    while True:
        try:
            bot.infinity_polling(timeout=30, long_polling_timeout=10)
        except Exception:
            time.sleep(5)

threading.Thread(target=run_bot, daemon=True).start()
while True:
    time.sleep(1)
